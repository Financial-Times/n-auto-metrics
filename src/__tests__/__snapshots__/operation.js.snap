// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`autoMetricsOp logs correctly operation failure of async function 1`] = `
Array [
  Array [
    "operation.operation.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.operation.segment.undefined.state.failure.category.CUSTOM_ERROR.type.MOCK_ERROR_TYPE",
    1,
  ],
]
`;

exports[`autoMetricsOp logs correctly operation failure of async function 2`] = `
Array [
  Array [
    Object {
      "category": "CUSTOM_ERROR",
      "message": "foo",
      "status": 500,
      "type": "MOCK_ERROR_TYPE",
    },
  ],
]
`;

exports[`autoMetricsOp logs correctly operation failure of non-async function 1`] = `
Array [
  Array [
    "operation.operation.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.operation.segment.undefined.state.failure.category.CUSTOM_ERROR.type.MOCK_ERROR_TYPE",
    1,
  ],
]
`;

exports[`autoMetricsOp logs correctly operation failure of non-async function 2`] = `
Array [
  Array [
    Object {
      "category": "CUSTOM_ERROR",
      "message": "foo",
      "status": 500,
      "type": "MOCK_ERROR_TYPE",
    },
  ],
]
`;

exports[`autoMetricsOp logs correctly operation success of async function with autoMetricsAction sub action 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.undefined.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.segment.undefined.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOp logs correctly operation success of non-async function with autoMetricsAction sub action 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.undefined.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.segment.undefined.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOp logs correctly operation success of req.metrics.segment from previous middlewares 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.MOCK_USER_TYPE.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.segment.MOCK_USER_TYPE.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares enhance and convert each method correctly 1`] = `
Array [
  Array [
    "operation.methodA.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.methodA.segment.undefined.state.success",
    1,
  ],
  Array [
    "operation.methodB.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.methodB.segment.undefined.state.success",
    1,
  ],
]
`;
