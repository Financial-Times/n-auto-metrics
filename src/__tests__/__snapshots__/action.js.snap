// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`metricsAction args format (paramsOrArgs, meta) takes the service name/operation value in meta first if available 1`] = `
Array [
  Array [
    "service.foo.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`metricsAction args format (paramsOrArgs, meta) takes the service name/operation value in paramsOrArgs if not available in meta or paramsOrArgs.meta 1`] = `
Array [
  Array [
    "service.foo.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`metricsAction args format (paramsOrArgs, meta) takes the service name/operation value in paramsOrArgs.meta if not available in meta 1`] = `
Array [
  Array [
    "service.foo.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`metricsAction args format (paramsOrArgs, meta) uses default service name "undefined" and undefined operation if not available in args 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`metricsAction enhance async function should invoke callFunction correctly 1`] = `
Array [
  Array [
    Object {
      "test": "a",
    },
    Object {
      "meta": "b",
    },
  ],
]
`;

exports[`metricsAction enhance async function should record callFunction failure correctly and throw the original exception 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.undefined",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.undefined",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`metricsAction enhance async function should record callFunction success correctly 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`metricsAction enhance non-async function should invoke callFunction correctly 1`] = `
Array [
  Array [
    Object {
      "test": "a",
    },
    Object {
      "meta": "b",
    },
  ],
]
`;

exports[`metricsAction enhance non-async function should record callFunction failure correctly and throw the original exception 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.undefined",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.undefined",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`metricsAction enhance non-async function should record callFunction success correctly 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`metricsAction record callFunction name as action name 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`metricsAction should throw error if metrics was not initialised 1`] = `"auto metrics instance needs to be initialised first"`;

exports[`metricsAction should throw error service name has space 1`] = `"action metrics service name needs to be string without spaces, at function callFunction"`;

exports[`metricsAction should throw error service name is not string 1`] = `"action metrics service name needs to be string without spaces, at function callFunction"`;

exports[`metricsAction when input operation function bundle throw Error if service name has space 1`] = `"action metrics service name needs to be string without spaces, at function actionFunction"`;
