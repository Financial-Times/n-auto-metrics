// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`autoMetricsAction args format (paramsOrArgs, meta) takes the service name/operation value in meta first if available 1`] = `
Array [
  Array [
    "service.foo.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`autoMetricsAction args format (paramsOrArgs, meta) takes the service name/operation value in paramsOrArgs if not available in meta 1`] = `
Array [
  Array [
    "service.foo.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`autoMetricsAction args format (paramsOrArgs, meta) uses default service name "undefined" and undefined operation if not available in args 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`autoMetricsAction enhance async function should invoke callFunction correctly 1`] = `
Array [
  Array [
    Object {
      "test": "a",
    },
    Object {
      "meta": "b",
    },
  ],
]
`;

exports[`autoMetricsAction enhance async function should record callFunction failure correctly and throw the original exception 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.undefined",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.undefined",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`autoMetricsAction enhance async function should record callFunction success correctly 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`autoMetricsAction enhance non-async function should invoke callFunction correctly 1`] = `
Array [
  Array [
    Object {
      "test": "a",
    },
    Object {
      "meta": "b",
    },
  ],
]
`;

exports[`autoMetricsAction enhance non-async function should record callFunction failure correctly and throw the original exception 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.undefined",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.undefined",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`autoMetricsAction enhance non-async function should record callFunction success correctly 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`autoMetricsAction record callFunction name as action name 1`] = `
Array [
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.undefined.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`autoMetricsAction should throw error if metrics was not initialised 1`] = `"auto metrics instance needs to be initialised first"`;

exports[`autoMetricsAction should throw error service name has space 1`] = `"action metrics service name needs to be string without spaces, at function callFunction"`;

exports[`autoMetricsAction should throw error service name is not string 1`] = `"action metrics service name needs to be string without spaces, at function callFunction"`;

exports[`autoMetricsAction used after autoLogAction from n-auto-logger log and record metrics correctly in callFunction failure 1`] = `
Array [
  Array [
    "service.foo.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`autoMetricsAction used after autoLogAction from n-auto-logger log and record metrics correctly in callFunction failure 2`] = `
Array [
  Array [
    Object {
      "a": "test",
      "action": "callFunction",
      "operation": "bar",
      "service": "foo",
    },
  ],
]
`;

exports[`autoMetricsAction used after autoLogAction from n-auto-logger log and record metrics correctly in callFunction failure 3`] = `
Array [
  Array [
    Object {
      "a": "test",
      "action": "callFunction",
      "category": "FETCH_RESPONSE_ERROR",
      "message": "bar",
      "operation": "bar",
      "result": "failure",
      "service": "foo",
      "status": 404,
      "type": "SESSION_NOT_FOUND",
    },
  ],
]
`;

exports[`autoMetricsAction used after autoLogAction from n-auto-logger log and record metrics correctly in callFunction failure 4`] = `Array []`;

exports[`autoMetricsAction used after autoLogAction from n-auto-logger log and record metrics correctly in callFunction success 1`] = `
Array [
  Array [
    "service.foo.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`autoMetricsAction used after autoLogAction from n-auto-logger log and record metrics correctly in callFunction success 2`] = `
Array [
  Array [
    Object {
      "a": "test",
      "action": "callFunction",
      "operation": "bar",
      "service": "foo",
    },
  ],
  Array [
    Object {
      "a": "test",
      "action": "callFunction",
      "operation": "bar",
      "result": "success",
      "service": "foo",
    },
  ],
]
`;

exports[`autoMetricsAction used before autoLogAction from n-auto-logger log and record metrics correctly in callFunction failure 1`] = `
Array [
  Array [
    "service.foo.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`autoMetricsAction used before autoLogAction from n-auto-logger log and record metrics correctly in callFunction failure 2`] = `
Array [
  Array [
    Object {
      "a": "test",
      "action": "callFunction",
      "operation": "bar",
      "service": "foo",
    },
  ],
]
`;

exports[`autoMetricsAction used before autoLogAction from n-auto-logger log and record metrics correctly in callFunction failure 3`] = `
Array [
  Array [
    Object {
      "a": "test",
      "action": "callFunction",
      "category": "FETCH_RESPONSE_ERROR",
      "message": "bar",
      "operation": "bar",
      "result": "failure",
      "service": "foo",
      "status": 404,
      "type": "SESSION_NOT_FOUND",
    },
  ],
]
`;

exports[`autoMetricsAction used before autoLogAction from n-auto-logger log and record metrics correctly in callFunction failure 4`] = `Array []`;

exports[`autoMetricsAction used before autoLogAction from n-auto-logger log and record metrics correctly in callFunction success 1`] = `
Array [
  Array [
    "service.foo.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.foo.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.bar.action.callFunction.state.success",
    1,
  ],
]
`;

exports[`autoMetricsAction used before autoLogAction from n-auto-logger log and record metrics correctly in callFunction success 2`] = `
Array [
  Array [
    Object {
      "a": "test",
      "action": "callFunction",
      "operation": "bar",
      "service": "foo",
    },
  ],
  Array [
    Object {
      "a": "test",
      "action": "callFunction",
      "operation": "bar",
      "result": "success",
      "service": "foo",
    },
  ],
]
`;

exports[`autoMetricsActions decorate each method correctly 1`] = `
Array [
  Array [
    Object {
      "test": "a",
    },
    Object {
      "operation": "mock-operation",
      "service": "mock-service",
    },
  ],
]
`;

exports[`autoMetricsActions decorate each method correctly 2`] = `
Array [
  Array [
    Object {
      "test": "b",
    },
    Object {
      "operation": "mock-operation",
      "service": "mock-service",
    },
  ],
]
`;

exports[`autoMetricsActions decorate each method correctly 3`] = `
Array [
  Array [
    "service.mock-service.action.callFunctionA.state.start",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionA.state.start",
    1,
  ],
  Array [
    "service.mock-service.action.callFunctionA.state.success",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionA.state.success",
    1,
  ],
  Array [
    "service.mock-service.action.callFunctionB.state.start",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionB.state.start",
    1,
  ],
  Array [
    "service.mock-service.action.callFunctionB.state.success",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionB.state.success",
    1,
  ],
]
`;

exports[`autoMetricsActions throw Error if service name has space 1`] = `"service name for metrics needs to be string without spaces"`;

exports[`autoMetricsActions used after autoLogActions log and record metrics correctly when callFunction failure 1`] = `
Array [
  Array [
    "service.mock-service.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.mock-service.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "service.mock-service.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`autoMetricsActions used after autoLogActions log and record metrics correctly when callFunction failure 2`] = `
Array [
  Array [
    Object {
      "action": "callFunction",
      "operation": "mock-operation",
      "service": "mock-service",
      "test": "a",
    },
  ],
]
`;

exports[`autoMetricsActions used after autoLogActions log and record metrics correctly when callFunction failure 3`] = `
Array [
  Array [
    Object {
      "action": "callFunction",
      "category": "FETCH_RESPONSE_ERROR",
      "message": "bar",
      "operation": "mock-operation",
      "result": "failure",
      "service": "mock-service",
      "status": 404,
      "test": "a",
      "type": "SESSION_NOT_FOUND",
    },
  ],
]
`;

exports[`autoMetricsActions used after autoLogActions log and record metrics correctly when callFunction failure 4`] = `Array []`;

exports[`autoMetricsActions used after autoLogActions log and record metrics correctly when callFunction success 1`] = `
Array [
  Array [
    Object {
      "test": "a",
    },
    Object {
      "operation": "mock-operation",
      "service": "mock-service",
    },
  ],
]
`;

exports[`autoMetricsActions used after autoLogActions log and record metrics correctly when callFunction success 2`] = `
Array [
  Array [
    Object {
      "test": "b",
    },
    Object {
      "operation": "mock-operation",
      "service": "mock-service",
    },
  ],
]
`;

exports[`autoMetricsActions used after autoLogActions log and record metrics correctly when callFunction success 3`] = `
Array [
  Array [
    "service.mock-service.action.callFunctionA.state.start",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionA.state.start",
    1,
  ],
  Array [
    "service.mock-service.action.callFunctionA.state.success",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionA.state.success",
    1,
  ],
  Array [
    "service.mock-service.action.callFunctionB.state.start",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionB.state.start",
    1,
  ],
  Array [
    "service.mock-service.action.callFunctionB.state.success",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionB.state.success",
    1,
  ],
]
`;

exports[`autoMetricsActions used after autoLogActions log and record metrics correctly when callFunction success 4`] = `
Array [
  Array [
    Object {
      "action": "callFunctionA",
      "operation": "mock-operation",
      "service": "mock-service",
      "test": "a",
    },
  ],
  Array [
    Object {
      "action": "callFunctionA",
      "operation": "mock-operation",
      "result": "success",
      "service": "mock-service",
      "test": "a",
    },
  ],
  Array [
    Object {
      "action": "callFunctionB",
      "operation": "mock-operation",
      "service": "mock-service",
      "test": "b",
    },
  ],
  Array [
    Object {
      "action": "callFunctionB",
      "operation": "mock-operation",
      "result": "success",
      "service": "mock-service",
      "test": "b",
    },
  ],
]
`;

exports[`autoMetricsActions used before autoLogActions log and record metrics correctly when callFunction failure 1`] = `
Array [
  Array [
    "service.mock-service.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.mock-service.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "service.mock-service.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`autoMetricsActions used before autoLogActions log and record metrics correctly when callFunction failure 2`] = `
Array [
  Array [
    Object {
      "action": "callFunction",
      "operation": "mock-operation",
      "test": "a",
    },
  ],
]
`;

exports[`autoMetricsActions used before autoLogActions log and record metrics correctly when callFunction failure 3`] = `
Array [
  Array [
    Object {
      "action": "callFunction",
      "category": "FETCH_RESPONSE_ERROR",
      "message": "bar",
      "operation": "mock-operation",
      "result": "failure",
      "status": 404,
      "test": "a",
      "type": "SESSION_NOT_FOUND",
    },
  ],
]
`;

exports[`autoMetricsActions used before autoLogActions log and record metrics correctly when callFunction failure 4`] = `Array []`;

exports[`autoMetricsActions used before autoLogActions log and record metrics correctly when callFunction success  1`] = `
Array [
  Array [
    Object {
      "test": "a",
    },
    Object {
      "operation": "mock-operation",
      "service": "mock-service",
    },
  ],
]
`;

exports[`autoMetricsActions used before autoLogActions log and record metrics correctly when callFunction success  2`] = `
Array [
  Array [
    Object {
      "test": "b",
    },
    Object {
      "operation": "mock-operation",
      "service": "mock-service",
    },
  ],
]
`;

exports[`autoMetricsActions used before autoLogActions log and record metrics correctly when callFunction success  3`] = `
Array [
  Array [
    "service.mock-service.action.callFunctionA.state.start",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionA.state.start",
    1,
  ],
  Array [
    "service.mock-service.action.callFunctionA.state.success",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionA.state.success",
    1,
  ],
  Array [
    "service.mock-service.action.callFunctionB.state.start",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionB.state.start",
    1,
  ],
  Array [
    "service.mock-service.action.callFunctionB.state.success",
    1,
  ],
  Array [
    "operation.mock-operation.action.callFunctionB.state.success",
    1,
  ],
]
`;

exports[`autoMetricsActions used before autoLogActions log and record metrics correctly when callFunction success  4`] = `
Array [
  Array [
    Object {
      "action": "callFunctionA",
      "operation": "mock-operation",
      "test": "a",
    },
  ],
  Array [
    Object {
      "action": "callFunctionA",
      "operation": "mock-operation",
      "result": "success",
      "test": "a",
    },
  ],
  Array [
    Object {
      "action": "callFunctionB",
      "operation": "mock-operation",
      "test": "b",
    },
  ],
  Array [
    Object {
      "action": "callFunctionB",
      "operation": "mock-operation",
      "result": "success",
      "test": "b",
    },
  ],
]
`;

exports[`autoMetricsOp record metrics correctly operation failure of async function 1`] = `
Array [
  Array [
    "operation.operation.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.operation.segment.undefined.state.failure.category.CUSTOM_ERROR.type.MOCK_ERROR_TYPE",
    1,
  ],
]
`;

exports[`autoMetricsOp record metrics correctly operation failure of async function 2`] = `
Array [
  Array [
    Object {
      "category": "CUSTOM_ERROR",
      "message": "foo",
      "status": 500,
      "type": "MOCK_ERROR_TYPE",
    },
  ],
]
`;

exports[`autoMetricsOp record metrics correctly operation failure of non-async function 1`] = `
Array [
  Array [
    "operation.operation.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.operation.segment.undefined.state.failure.category.CUSTOM_ERROR.type.MOCK_ERROR_TYPE",
    1,
  ],
]
`;

exports[`autoMetricsOp record metrics correctly operation failure of non-async function 2`] = `
Array [
  Array [
    Object {
      "category": "CUSTOM_ERROR",
      "message": "foo",
      "status": 500,
      "type": "MOCK_ERROR_TYPE",
    },
  ],
]
`;

exports[`autoMetricsOp record metrics correctly operation success of async function with autoMetricsAction sub action 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.undefined.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.segment.undefined.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOp record metrics correctly operation success of non-async function with autoMetricsAction sub action 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.undefined.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.segment.undefined.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOp record metrics correctly operation success of req.meta.segment from previous middlewares if not set req.metrics 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.MOCK_USER_TYPE.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.segment.MOCK_USER_TYPE.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOp record metrics correctly operation success of req.metrics.segment from previous middlewares 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.MOCK_USER_TYPE.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.segment.MOCK_USER_TYPE.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOp returns an enhanced operation function for async operation throwing error 1`] = `
Array [
  Array [
    Object {
      "message": "Not Found",
      "status": 404,
    },
  ],
]
`;

exports[`autoMetricsOp returns an enhanced operation function for non-async middoperationleware throwing error 1`] = `
Array [
  Array [
    Object {
      "message": "Not Found",
      "status": 404,
    },
  ],
]
`;

exports[`autoMetricsOp throw Error if metrics instance was not set 1`] = `[Error: auto metrics instance needs to be initialised]`;

exports[`autoMetricsOp used after autoLogOp from n-auto-logger record correctly in operation failure with enhanced sub action 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.undefined.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.operationFunction.segment.undefined.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`autoMetricsOp used after autoLogOp from n-auto-logger record correctly in operation failure with enhanced sub action 2`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
    },
  ],
]
`;

exports[`autoMetricsOp used after autoLogOp from n-auto-logger record correctly in operation failure with enhanced sub action 3`] = `
Array [
  Array [
    Object {
      "action": "callFunction",
      "category": "FETCH_RESPONSE_ERROR",
      "message": "bar",
      "operation": "operationFunction",
      "result": "failure",
      "status": 404,
      "type": "SESSION_NOT_FOUND",
    },
  ],
  Array [
    Object {
      "category": "FETCH_RESPONSE_ERROR",
      "message": "bar",
      "operation": "operationFunction",
      "result": "failure",
      "status": 404,
      "type": "SESSION_NOT_FOUND",
    },
  ],
]
`;

exports[`autoMetricsOp used after autoLogOp from n-auto-logger record correctly in operation failure with enhanced sub action 4`] = `Array []`;

exports[`autoMetricsOp used after autoLogOp from n-auto-logger record correctly in operation success with enhanced sub action 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.undefined.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.segment.undefined.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOp used after autoLogOp from n-auto-logger record correctly in operation success with enhanced sub action 2`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
      "result": "success",
    },
  ],
  Array [
    Object {
      "operation": "operationFunction",
      "result": "success",
    },
  ],
]
`;

exports[`autoMetricsOp used after autoLogOp from n-auto-logger record correctly in operation success with enhanced sub action 3`] = `Array []`;

exports[`autoMetricsOp used after autoLogOp from n-auto-logger record correctly in operation success with enhanced sub action 4`] = `Array []`;

exports[`autoMetricsOp used before autoLogOp from n-auto-logger record correctly in operation failure with enhanced sub action 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.undefined.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.status.404",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
  Array [
    "operation.operationFunction.segment.undefined.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`autoMetricsOp used before autoLogOp from n-auto-logger record correctly in operation failure with enhanced sub action 2`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
    },
  ],
]
`;

exports[`autoMetricsOp used before autoLogOp from n-auto-logger record correctly in operation failure with enhanced sub action 3`] = `
Array [
  Array [
    Object {
      "action": "callFunction",
      "category": "FETCH_RESPONSE_ERROR",
      "message": "bar",
      "operation": "operationFunction",
      "result": "failure",
      "status": 404,
      "type": "SESSION_NOT_FOUND",
    },
  ],
  Array [
    Object {
      "category": "FETCH_RESPONSE_ERROR",
      "message": "bar",
      "operation": "operationFunction",
      "result": "failure",
      "status": 404,
      "type": "SESSION_NOT_FOUND",
    },
  ],
]
`;

exports[`autoMetricsOp used before autoLogOp from n-auto-logger record correctly in operation failure with enhanced sub action 4`] = `Array []`;

exports[`autoMetricsOp used before autoLogOp from n-auto-logger record correctly in operation success with enhanced sub action 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.undefined.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.start",
    1,
  ],
  Array [
    "service.undefined.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.action.callFunction.state.success",
    1,
  ],
  Array [
    "operation.operationFunction.segment.undefined.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOp used before autoLogOp from n-auto-logger record correctly in operation success with enhanced sub action 2`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
    },
  ],
  Array [
    Object {
      "action": "callFunction",
      "operation": "operationFunction",
      "result": "success",
    },
  ],
  Array [
    Object {
      "operation": "operationFunction",
      "result": "success",
    },
  ],
]
`;

exports[`autoMetricsOp used before autoLogOp from n-auto-logger record correctly in operation success with enhanced sub action 3`] = `Array []`;

exports[`autoMetricsOp used before autoLogOp from n-auto-logger record correctly in operation success with enhanced sub action 4`] = `Array []`;

exports[`autoMetricsOps and toMiddlewares enhance and convert each method correctly 1`] = `
Array [
  Array [
    "operation.methodA.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.methodA.segment.undefined.state.success",
    1,
  ],
  Array [
    "operation.methodB.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.methodB.segment.undefined.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used after autoLogOps log and record metrics correctly when callFunction failure 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.segment.undefined.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used after autoLogOps log and record metrics correctly when callFunction failure 2`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
    },
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used after autoLogOps log and record metrics correctly when callFunction failure 3`] = `
Array [
  Array [
    Object {
      "category": "FETCH_RESPONSE_ERROR",
      "message": "bar",
      "operation": "operationFunction",
      "result": "failure",
      "status": 404,
      "type": "SESSION_NOT_FOUND",
    },
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used after autoLogOps log and record metrics correctly when callFunction failure 4`] = `Array []`;

exports[`autoMetricsOps and toMiddlewares used after autoLogOps log and record metrics correctly when callFunction success 1`] = `
Array [
  Array [
    "operation.methodA.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.methodA.segment.undefined.state.success",
    1,
  ],
  Array [
    "operation.methodB.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.methodB.segment.undefined.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used after autoLogOps log and record metrics correctly when callFunction success 2`] = `
Array [
  Array [
    Object {
      "operation": "methodA",
    },
  ],
  Array [
    Object {
      "operation": "methodA",
      "result": "success",
    },
  ],
  Array [
    Object {
      "operation": "methodB",
    },
  ],
  Array [
    Object {
      "operation": "methodB",
      "result": "success",
    },
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used after autoLogOps log and record metrics correctly when callFunction success 3`] = `Array []`;

exports[`autoMetricsOps and toMiddlewares used after autoLogOps log and record metrics correctly when callFunction success 4`] = `Array []`;

exports[`autoMetricsOps and toMiddlewares used before autoLogOps log and record metrics correctly when callFunction failure 1`] = `
Array [
  Array [
    "operation.operationFunction.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.operationFunction.segment.undefined.state.failure.category.FETCH_RESPONSE_ERROR.type.SESSION_NOT_FOUND",
    1,
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used before autoLogOps log and record metrics correctly when callFunction failure 2`] = `
Array [
  Array [
    Object {
      "operation": "operationFunction",
    },
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used before autoLogOps log and record metrics correctly when callFunction failure 3`] = `
Array [
  Array [
    Object {
      "category": "FETCH_RESPONSE_ERROR",
      "message": "bar",
      "operation": "operationFunction",
      "result": "failure",
      "status": 404,
      "type": "SESSION_NOT_FOUND",
    },
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used before autoLogOps log and record metrics correctly when callFunction failure 4`] = `Array []`;

exports[`autoMetricsOps and toMiddlewares used before autoLogOps log and record metrics correctly when callFunction success 1`] = `
Array [
  Array [
    "operation.methodA.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.methodA.segment.undefined.state.success",
    1,
  ],
  Array [
    "operation.methodB.segment.undefined.state.start",
    1,
  ],
  Array [
    "operation.methodB.segment.undefined.state.success",
    1,
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used before autoLogOps log and record metrics correctly when callFunction success 2`] = `
Array [
  Array [
    Object {
      "operation": "methodA",
    },
  ],
  Array [
    Object {
      "operation": "methodA",
      "result": "success",
    },
  ],
  Array [
    Object {
      "operation": "methodB",
    },
  ],
  Array [
    Object {
      "operation": "methodB",
      "result": "success",
    },
  ],
]
`;

exports[`autoMetricsOps and toMiddlewares used before autoLogOps log and record metrics correctly when callFunction success 3`] = `Array []`;

exports[`autoMetricsOps and toMiddlewares used before autoLogOps log and record metrics correctly when callFunction success 4`] = `Array []`;
